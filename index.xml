<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>What, Why, How</title><link>https://jiyongcheng.dev/</link><description>Recent content on What, Why, How</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 08 Dec 2021 12:11:03 +1100</lastBuildDate><atom:link href="https://jiyongcheng.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Postgresql Questions</title><link>https://jiyongcheng.dev/post/db/postgresql/questions/</link><pubDate>Wed, 08 Dec 2021 12:11:03 +1100</pubDate><guid>https://jiyongcheng.dev/post/db/postgresql/questions/</guid><description>&lt;p>I try to list out the questions during working on Postgresql here for the future reference.&lt;/p>
&lt;h2 id="how-to-convert-date-string-to-timestamp-in-postgresql">How to convert date string to timestamp in postgresql?&lt;/h2>
&lt;p>Use function &lt;a href="https://www.postgresqltutorial.com/postgresql-to_timestamp/">TO_TIMESTAMP&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TO_TIMESTAMP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;2017-03-31 9:30:20&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;YYYY-MM-DD HH:MI:SS&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">-- it will return as following:
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="mi">2017&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">03&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">31&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">09&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">000000&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="how-to-return-a-string-value-from-jsonb-in-postgresql">How to return a string value from jsonb in Postgresql?&lt;/h2>
&lt;p>Use &lt;code>jsonb-&amp;gt;&amp;gt;key&lt;/code> operator, be carefuly if you use &lt;code>jsonb-&amp;gt;key&lt;/code> it will return back &lt;code>jsonb&lt;/code> type, not a string.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;{
&lt;/span>&lt;span class="s1"> &amp;#34;first_name&amp;#34;: &amp;#34;Adam&amp;#34;,
&lt;/span>&lt;span class="s1"> &amp;#34;last_name&amp;#34;: &amp;#34;Smith&amp;#34;,
&lt;/span>&lt;span class="s1"> &amp;#34;created_at&amp;#34;: &amp;#34;2021-12-07 03:08:57&amp;#34;,
&lt;/span>&lt;span class="s1"> &amp;#34;updated_at&amp;#34;: &amp;#34;2021-12-07 03:09:00&amp;#34;
&lt;/span>&lt;span class="s1">}&amp;#39;&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">jsonb&lt;/span>&lt;span class="o">-&amp;gt;&amp;gt;&lt;/span>&lt;span class="s1">&amp;#39;first_name&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c1">-- it will return `Adam`
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="can-i-extract-the-info-from-jsonb-in-postgresql">Can I extract the info from jsonb in postgresql?&lt;/h2>
&lt;p>jsonb_extract_path ( from_json jsonb, VARIADIC path_elems text[] ) → jsonb&lt;/p>
&lt;p>Extracts JSON sub-object at the specified path. (This is functionally equivalent to the #&amp;gt; operator, but writing the path out as a variadic list can be more convenient in some cases.)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="n">json_extract_path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;{&amp;#34;f2&amp;#34;:{&amp;#34;f3&amp;#34;:1},&amp;#34;f4&amp;#34;:{&amp;#34;f5&amp;#34;:99,&amp;#34;f6&amp;#34;:&amp;#34;foo&amp;#34;}}&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;f4&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;f6&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">→&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Git Commands</title><link>https://jiyongcheng.dev/post/devops/git/commands/</link><pubDate>Thu, 28 Oct 2021 15:40:40 +1100</pubDate><guid>https://jiyongcheng.dev/post/devops/git/commands/</guid><description>&lt;h2 id="git-commands">Git commands&lt;/h2>
&lt;p>list some commands often being used:&lt;/p>
&lt;h2 id="delete-branch">Delete branch&lt;/h2>
&lt;ul>
&lt;li>Deleting local branches&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git branch -d feature/add-new-feature
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Deleting remote branches in Git&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash"> git push origin --delete feature/add-new-feature
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="change-branch-name">Change branch name&lt;/h2>
&lt;ul>
&lt;li>change name of local branch&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git checkout &amp;lt;branch&amp;gt;
git branch -m &amp;lt;new_branch_name&amp;gt;
&lt;span class="c1">##example&lt;/span>
git checkout feature
git branch -m quickfix
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>change name of remote branch
&lt;ul>
&lt;li>you have to change branch name locally first&lt;/li>
&lt;li>then do the following:&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">git push &amp;lt;remote&amp;gt; :&amp;lt;old_branch_name&amp;gt; &amp;lt;new_branch_name&amp;gt;
&lt;span class="c1">#you have to set the upstream branch for the newly created branch using the “git upstream” command.&lt;/span>
git push &amp;lt;remote&amp;gt; -u &amp;lt;new_branch_name&amp;gt;
git push origin :feature quickfix
git push origin -u quickfix
&lt;span class="c1">## example&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Convert Sqlite to Mysql</title><link>https://jiyongcheng.dev/post/db/convert-sqlite-to-mysql/</link><pubDate>Thu, 28 Oct 2021 13:22:45 +1100</pubDate><guid>https://jiyongcheng.dev/post/db/convert-sqlite-to-mysql/</guid><description>&lt;h2 id="is-it-possible-to-convert-sqlite-to-mysql-as-is">Is it possible to convert SQLite to MySQL &amp;ldquo;as is&amp;rdquo;?&lt;/h2>
&lt;p>Probably the quick and easiest way to convert SQLite to MySQL includes two general steps:&lt;/p>
&lt;ul>
&lt;li>Export SQLite database to dump file using SQLite .dump command.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">sqlite3 sample.db .dump &amp;gt; dump.sql
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>You can then (in theory) import SQLite dump into the MySQL database.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">mysql -p -u root -h 127.0.0.1 &lt;span class="nb">test&lt;/span> &amp;lt; dump.sql
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&amp;ldquo;In theory&amp;rdquo; means that solution wouldn&amp;rsquo;t work as there are a few differences in grammars between MySQL and SQLite.&lt;/p>
&lt;p>There are just some differences between SQLite and MySQL syntax&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>SQLite&lt;/th>
&lt;th>MySQL&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>AUTOINCREMENT&lt;/td>
&lt;td>AUTO_INCREMENT&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TEXT&lt;/td>
&lt;td>varchars&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>double quotes (&amp;quot; &amp;ldquo;)&lt;/td>
&lt;td>backticks (` `)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>BEGIN TRANSACTION; COMMIT;&lt;/code>&lt;/td>
&lt;td>&lt;code> BEGIN; COMMIT&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CLOB&lt;/td>
&lt;td>TINYTEXT, TEXT, MEDIUMTEXT, LONGTEXT&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PRAGMA foreign_keys=OFF;&lt;/td>
&lt;td>SET FOREIGN_KEY_CHECKS=0;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Upstream and Downstream</title><link>https://jiyongcheng.dev/post/system-design/upstream-downstream/</link><pubDate>Thu, 28 Oct 2021 09:31:07 +1100</pubDate><guid>https://jiyongcheng.dev/post/system-design/upstream-downstream/</guid><description>&lt;p>In the &lt;code>LNMP&lt;/code> development process, we often configure the nginx, and we will set similar like this&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">upstream php-fpm &lt;span class="o">{&lt;/span>
server php-fpm:9000&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>and I want to know what does &lt;code>upstream&lt;/code> here mean.&lt;/p>
&lt;p>&lt;img src="stream.drawio.svg" alt="Up stream and Down stream">&lt;/p>
&lt;p>So basically it&amp;rsquo;s about dependency, the &lt;code>Nginx&lt;/code> server depend on &lt;code>PHP&lt;/code> server to return back data. So &lt;code>PHP&lt;/code> server is upstream of &lt;code>Nginx&lt;/code>.&lt;/p>
&lt;p>The &lt;code>Browser&lt;/code> is depending on the &lt;code>Nginx&lt;/code> server to return back data, so &lt;code>Nginx&lt;/code> server is &lt;code>upstream&lt;/code> of &lt;code>Browser&lt;/code>.&lt;/p>
&lt;p>On the other hand, &lt;code>Browser&lt;/code> is &lt;code>downstream&lt;/code> of &lt;code>Nginx&lt;/code> server, because the data from &lt;code>Nginx&lt;/code> will flow into the &lt;code>Browser&lt;/code>, same as &lt;code>PHP&lt;/code>, &lt;code>DB&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>A production process is very similar to a river, so it’s easy to grasp that as the process goes from one step to the next, we’re moving downstream.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>We can deduct the following rules:&lt;/p>
&lt;ul>
&lt;li>Dependency Rule: each item depends on all the items upstream from its viewpoint&lt;/li>
&lt;li>Value Rule: moving downstream, each step adds more value to the product&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Docker commands</title><link>https://jiyongcheng.dev/post/devops/tool/docker/docker-commands/</link><pubDate>Mon, 11 Oct 2021 14:31:07 +1000</pubDate><guid>https://jiyongcheng.dev/post/devops/tool/docker/docker-commands/</guid><description>&lt;h2 id="does-docker-build---no-cache-actually-download-and-refresh-the-base-image">Does Docker build &amp;ndash;no-cache actually download and refresh the base image&lt;/h2>
&lt;p>The &amp;ndash;no-cache option will rebuild the image without using the local cached layers.&lt;/p>
&lt;p>However, the FROM line will reuse the already pulled base image if it exists on the build host (the from line itself may not be cached, but the image it pulls is).&lt;/p>
&lt;p>If you want to pull the base image again, you can use the &amp;ndash;pull option to the build command. E.g.&lt;/p>
&lt;p>&lt;code>docker build --no-cache --pull -t new-image-name:latest .&lt;/code>&lt;/p>
&lt;p>&lt;a href="https://stackoverflow.com/questions/52664744/does-docker-build-no-cache-actually-download-and-refresh-the-base-image#52666415">check more from here&lt;/a>&lt;/p></description></item><item><title>Data structures and algorithm</title><link>https://jiyongcheng.dev/resource/datastructure/</link><pubDate>Thu, 07 Oct 2021 09:29:55 +1000</pubDate><guid>https://jiyongcheng.dev/resource/datastructure/</guid><description>&lt;h2 id="algorithm">Algorithm&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/williamfiset/Algorithms">https://github.com/williamfiset/Algorithms&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="practice">Practice&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/karan/Projects">https://github.com/karan/Projects&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>DBs</title><link>https://jiyongcheng.dev/resource/db/</link><pubDate>Thu, 07 Oct 2021 09:29:55 +1000</pubDate><guid>https://jiyongcheng.dev/resource/db/</guid><description>&lt;h2 id="postgresql">PostgreSQL&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/faisalbasra/postgres_books">https://github.com/faisalbasra/postgres_books&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="mysql">Mysql&lt;/h2>
&lt;ul>
&lt;li>deadlocks &lt;a href="https://github.com/aneasystone/mysql-deadlocks">https://github.com/aneasystone/mysql-deadlocks&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Books</title><link>https://jiyongcheng.dev/resource/book/</link><pubDate>Wed, 06 Oct 2021 09:29:55 +1000</pubDate><guid>https://jiyongcheng.dev/resource/book/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://github.com/stormtrooper96/books">https://github.com/stormtrooper96/books&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/AB1908/CS-Books">https://github.com/AB1908/CS-Books&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Check Port Being Used</title><link>https://jiyongcheng.dev/post/devops/linux/check-port-being-used/</link><pubDate>Wed, 29 Sep 2021 12:45:41 +1000</pubDate><guid>https://jiyongcheng.dev/post/devops/linux/check-port-being-used/</guid><description>&lt;p>&lt;code>lsof&lt;/code> list open files&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">lsof -i -P -n &lt;span class="p">|&lt;/span> grep LISTEN
- -i selects the listing of all Internet and x.25 &lt;span class="o">(&lt;/span>HP-UX&lt;span class="o">)&lt;/span> network files
- -P inhibit the conversion of port numbers to port names
- -n inhibit the conversion of network numbers to host names
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>-P and -n will make the lookup faster&lt;/code>&lt;/p>
&lt;h2 id="example">Example&lt;/h2>
&lt;h3 id="list-only-files-that-listen-to-port-80">List only files that listen to port 80&lt;/h3>
&lt;p>&lt;code>lsof -i:80 -P -n | grep LISTEN&lt;/code>&lt;/p></description></item><item><title>Understanding Git</title><link>https://jiyongcheng.dev/post/devops/tool/git/understanding-git/</link><pubDate>Tue, 28 Sep 2021 15:35:23 +1000</pubDate><guid>https://jiyongcheng.dev/post/devops/tool/git/understanding-git/</guid><description>&lt;h2 id="what-does-10064-mean-in-git">What does 10064 mean in Git?&lt;/h2>
&lt;p>When you do &lt;code>git commit&lt;/code> command, you probably have seen this information&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"> delete mode 100644 layouts/resource/index.html
create mode 100644 layouts/resource/section.html
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>but what does this series of number mean?&lt;/p>
&lt;p>The values shown are the 16-bit file modes as stored by Git, you can &lt;a href="https://github.com/git/git/blob/master/Documentation/technical/index-format.txt">check here&lt;/a> to know more:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback"> 32-bit mode, split into (high to low bits)
4-bit object type
valid values in binary are 1000 (regular file), 1010 (symbolic link) and 1110 (gitlink)
3-bit unused
9-bit unix permission. Only 0755 and 0644 are valid for regular files.
Symbolic links and gitlinks have value 0 in this field.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If the file doesn’t mention directories; they are represented using object type 0100.&lt;/p>
&lt;p>Each digit in the six-digit value is in octal, representing three bits; 16 bits thus need six digits, the first of which only represents one bit:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">Type|---|Perm bits
1000 000 111101101
1 0 0 7 5 5
1000 000 110100100
1 0 0 6 4 4
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Git doesn’t store arbitrary modes, only a subset of the values are allowed, from the usual POSIX types and modes (in octal, 12 for a symbolic link, 10 for a regular file, 04 for a directory) to which git adds 16 for Git links. The mode is appended, using four octal digits.&lt;/p>
&lt;p>For files,&lt;/p>
&lt;p>you’ll only ever see 100755 or 100644 (although 100664 is also technically possible);&lt;/p>
&lt;p>directories are 040000 (permissions are ignored),&lt;/p>
&lt;p>symbolic links 120000.&lt;/p>
&lt;p>The set-user-ID, set-group-ID and sticky bits aren’t supported at all (they would be stored in the unused bits).&lt;/p></description></item><item><title>Create Array With Object From List using jq</title><link>https://jiyongcheng.dev/post/devops/tool/jq/create-array-with-object-from-list/</link><pubDate>Wed, 22 Sep 2021 14:31:07 +1000</pubDate><guid>https://jiyongcheng.dev/post/devops/tool/jq/create-array-with-object-from-list/</guid><description>&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>We have a list of &lt;code>IDs&lt;/code> generated into a file &lt;code>F&lt;/code> with this format:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">2f9921bc-a4c9-419a-b069-f8f23c7727f7
26bf5cc3-73de-425e-9a6b-b70223387314
30ac5b4c-f4c6-42c6-901d-e8bdf16464b8
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We want to generate a &lt;code>JSON&lt;/code> object from the &lt;code>IDs&lt;/code> with this structure:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;users&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;user_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2f9921bc-a4c9-419a-b069-f8f23c7727f7&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;organisation_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">123&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;user-type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;test&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="the-way-we-do-it">The way we do it&lt;/h2>
&lt;h3 id="we-use-jq">we use &lt;code>jq&lt;/code>&lt;/h3>
&lt;ul>
&lt;li>what is &lt;code>jq&lt;/code>
&lt;ul>
&lt;li>&lt;code>jq&lt;/code> is a lightweight and flexible command-line JSON processor. 轻量级的命令行JSON处理器，非常灵活&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>what are the main features
&lt;ul>
&lt;li>&lt;code>jq&lt;/code> is like &lt;code>sed&lt;/code> for &lt;code>JSON&lt;/code> data
&lt;ul>
&lt;li>你可以方便的使用它对结构化的数据进行&lt;code>slice&lt;/code> and &lt;code>filter&lt;/code> and &lt;code>map&lt;/code> and &lt;code>transform&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>jq&lt;/code> is written in portable C, and it has zero runtime dependencies.
&lt;ul>
&lt;li>它没有运行时的依赖&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://stedolan.github.io/jq/tutorial/">Tutorial&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stedolan.github.io/jq/manual/">Manual&lt;/a> or you can run &lt;code>man jq&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="how-do-we-do-it">How do we do it&lt;/h2>
&lt;p>the following is the code&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash"> &lt;span class="nv">USER_IDS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>jq -Rn &lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1"> def assemble_user($user_id): {
&lt;/span>&lt;span class="s1"> &amp;#34;user_id&amp;#34;: $user_id
&lt;/span>&lt;span class="s1"> };
&lt;/span>&lt;span class="s1"> [
&lt;/span>&lt;span class="s1"> inputs
&lt;/span>&lt;span class="s1"> | select(length&amp;gt;0)
&lt;/span>&lt;span class="s1"> | assemble_user(.)
&lt;/span>&lt;span class="s1"> ]&amp;#39;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&amp;lt;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$USER_IDS&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;span class="nv">USER_JSON&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span> jq -n &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --argjson user_ids &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$USER_IDS&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --arg organisation_id &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$ORGANISATION_ID&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --arg user_type &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$USER_TYPE&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="s1">&amp;#39;{organisation_id: $organisation_id, user_type: $user_type, users: $user_ids}&amp;#39;&lt;/span> &lt;span class="k">)&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$USER_JSON&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="syntax-of-jq">Syntax of jq&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&amp;ndash;raw-input/-R:
&lt;strong>Don&amp;rsquo;t parse the input as JSON&lt;/strong>. Instead, each line of text is &lt;strong>passed to the filter as a &lt;code>string&lt;/code>&lt;/strong>. If combined with &amp;ndash;slurp, then the entire input is passed to the filter as a single long string.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&amp;ndash;null-input/-n:
Don&amp;rsquo;t read any input at all! Instead, the filter is run once using null as the input. This is useful when using jq as a simple calculator or to construct JSON data from scratch.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>input&lt;/code> and &lt;code>inputs&lt;/code>, that read from the same sources (e.g., stdin, files named on the command-line) as jq itself.&lt;/p>
&lt;ul>
&lt;li>&lt;code>input&lt;/code> Outputs one new input.&lt;/li>
&lt;li>&lt;code>inputs&lt;/code> Outputs all remaining inputs, one by one.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="explaination-of-the-process">Explaination of the process&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>-R&lt;/code> means jq will treat the anything it gets as a string not a JSON. if you don&amp;rsquo;t use &lt;code>-R&lt;/code> and pass a string as input, it will throw error.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-n&lt;/code> means jq will not read any input. so it can work together with &lt;code>inputs&lt;/code> to construct a JSON data.&lt;/p>
&lt;ul>
&lt;li>if you do this &lt;code>echo '1\n2\n3' | jq -R '[inputs]'&lt;/code> you will only get &lt;code>[&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;]&lt;/code>. why? because without &lt;code>-n&lt;/code> jq will read a input, which is &lt;code>1&lt;/code>, then the &lt;code>inputs&lt;/code> will ouputs the &lt;strong>remaining&lt;/strong> inputs, which are &lt;code>2\n3&lt;/code>.&lt;/li>
&lt;li>if you do this &lt;code>echo '1\n2\n3' | jq -Rn '[inputs]'&lt;/code>, you will get &lt;code>[&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;]&lt;/code>. why? because with &lt;code>-n&lt;/code> jq will &lt;strong>not&lt;/strong> read a input, so the &lt;code>inputs&lt;/code> will outputs the &lt;strong>remaining&lt;/strong> inputs, which are &lt;code>1\n2\n3&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>select(length&amp;gt;0)&lt;/code> for each input, it will filter out the empty input&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>assemble_user(.)&lt;/code> for each input, it will call the def &lt;code>assemble_user&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>def assemble_user($user_id): {&amp;quot;user_id&amp;quot;: $user_id}&lt;/code> for each input like &lt;code>123&lt;/code>, it will return a object like &lt;code>{&amp;quot;user_id&amp;quot;: 123}&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;lt;&amp;lt;&amp;lt;&lt;/code> this symbol means &lt;code>Here string&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;&amp;lt;&amp;lt;&lt;/code> is known as here-string. Instead of typing in text, you give a pre-made string of text to a program. For example, with such program as bc we can do bc &amp;laquo;&amp;lt; 5&lt;em>4 to just get output for that specific case, no need to run bc interactively. Think of it as the equivalent of echo &amp;lsquo;5&lt;/em>4&amp;rsquo; | bc.&lt;/li>
&lt;/ul>
&lt;p>check the difference between &lt;code>&amp;lt;,&amp;lt;&amp;lt;,&amp;lt;&amp;lt;&amp;lt;&lt;/code> &lt;a href="https://askubuntu.com/questions/678915/whats-the-difference-between-and-in-bash">here&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>--argjson&lt;/code> means it has a JSON data as the argument.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>--arg&lt;/code> means it has a string data as the argument&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>jq -n --argjson user_ids &amp;quot;$USER_IDS&amp;quot; --arg organisation_id &amp;quot;$ORGANISATION_ID&amp;quot; &lt;/code> you can structure a JSON data easily.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="the-result">The result&lt;/h2>
&lt;ul>
&lt;li>So first step I get the array with objects.
&lt;ul>
&lt;li>if you do this quickly&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;2f9921bc-a4c9-419a-b069-f8f23c7727f7\n26bf5cc3-73de-425e-9a6b-b70223387314\n30ac5b4c-f4c6-42c6-901d-e8bdf16464b8&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> jq -Rn &lt;span class="s1">&amp;#39;
&lt;/span>&lt;span class="s1"> def assemble_users($user_id): {&amp;#34;user_id&amp;#34;: $user_id};
&lt;/span>&lt;span class="s1"> [
&lt;/span>&lt;span class="s1"> inputs
&lt;/span>&lt;span class="s1"> | select(length&amp;gt;0)
&lt;/span>&lt;span class="s1"> | assemble_users(.)
&lt;/span>&lt;span class="s1"> ]&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>you will get:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;user_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2f9921bc-a4c9-419a-b069-f8f23c7727f7&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;user_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;26bf5cc3-73de-425e-9a6b-b70223387314&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;user_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;30ac5b4c-f4c6-42c6-901d-e8bdf16464b8&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Second, I assemble them together as a object. you will get&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;users&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;user_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;2f9921bc-a4c9-419a-b069-f8f23c7727f7&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;user_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;26bf5cc3-73de-425e-9a6b-b70223387314&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;user_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;30ac5b4c-f4c6-42c6-901d-e8bdf16464b8&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">],&lt;/span>
&lt;span class="nt">&amp;#34;organisation_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">123&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;user-type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;test&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>DevOps</title><link>https://jiyongcheng.dev/resource/devops/</link><pubDate>Wed, 22 Sep 2021 09:29:55 +1000</pubDate><guid>https://jiyongcheng.dev/resource/devops/</guid><description>&lt;h1 id="makefile">makefile&lt;/h1>
&lt;ul>
&lt;li>Makefile: &lt;a href="https://makefiletutorial.com/#getting-started">https://makefiletutorial.com/#getting-started&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="git">git&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://www.git-scm.com/book/en/v2">https://www.git-scm.com/book/en/v2&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.atlassian.com/git/tutorials/what-is-version-control">https://www.atlassian.com/git/tutorials/what-is-version-control&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>English</title><link>https://jiyongcheng.dev/resource/english/</link><pubDate>Wed, 22 Sep 2021 09:29:55 +1000</pubDate><guid>https://jiyongcheng.dev/resource/english/</guid><description>&lt;p>发音的本质是通过感官（耳朵+眼睛），协助嘴（口腔肌肉），养成正确的发音习惯。 眼（观察口型）+ 耳朵（辩音）+ 嘴（刻意练习）= 漂亮的音&lt;/p>
&lt;ul>
&lt;li>Master spoken english: &lt;a href="https://www.youtube.com/watch?v=ilrPvgs29v0&amp;amp;list=PL9YsEhi5oFAbjsAqP-3b-fAIip98pAsx9&amp;amp;index=3">https://www.youtube.com/watch?v=ilrPvgs29v0&amp;amp;list=PL9YsEhi5oFAbjsAqP-3b-fAIip98pAsx9&amp;amp;index=3&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Interesting</title><link>https://jiyongcheng.dev/resource/interesting/</link><pubDate>Wed, 22 Sep 2021 09:29:55 +1000</pubDate><guid>https://jiyongcheng.dev/resource/interesting/</guid><description>&lt;h2 id="uncategorised">Uncategorised&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://joelcalifa.com/work/">https://joelcalifa.com/work/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/laradock/laradock">https://github.com/laradock/laradock&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/google/eng-practices">https://github.com/google/eng-practices&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="blog">Blog&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/hawx1993/tech-blog">https://github.com/hawx1993/tech-blog&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/mqyqingfeng/Blog">https://github.com/mqyqingfeng/Blog&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/singpenguin/ppt">https://github.com/singpenguin/ppt&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="magazine">Magazine&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rogerzhu/MNWeeklyCategory">https://github.com/rogerzhu/MNWeeklyCategory&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="interview">Interview&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/monklof/Back-End-Developer-Interview-Questions">https://github.com/monklof/Back-End-Developer-Interview-Questions&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/sharu725/online-cv">https://github.com/sharu725/online-cv&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/yangshun/front-end-interview-handbook">https://github.com/yangshun/front-end-interview-handbook&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="courses">Courses&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/prakhar1989/awesome-courses">https://github.com/prakhar1989/awesome-courses&lt;/a>&lt;/li>
&lt;li>computer science &lt;a href="https://github.com/1c7/Crash-Course-Computer-Science-Chinese">https://github.com/1c7/Crash-Course-Computer-Science-Chinese&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="math">Math&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://mathlets.org/mathlets/">https://mathlets.org/mathlets/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Programming language</title><link>https://jiyongcheng.dev/resource/programming-language/</link><pubDate>Wed, 22 Sep 2021 09:29:55 +1000</pubDate><guid>https://jiyongcheng.dev/resource/programming-language/</guid><description>&lt;h2 id="tools-for-programming-languages">Tools for programming languages&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://programming-idioms.org/about#about-block-all-idioms">https://programming-idioms.org/about#about-block-all-idioms&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="java">Java&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://programmingbydoing.com/">https://programmingbydoing.com/&lt;/a>&lt;/li>
&lt;li>java-a-beginners-guide-eighth-edition: &lt;a href="https://pdfroom.com/books/java-a-beginners-guide-eighth-edition/PXn2GJrKgxV">https://pdfroom.com/books/java-a-beginners-guide-eighth-edition/PXn2GJrKgxV&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="python">Python&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://realpython.com/">https://realpython.com/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://au1lib.org/book/5973705/f707f1?id=5973705&amp;amp;secret=f707f1">https://au1lib.org/book/5973705/f707f1?id=5973705&amp;amp;secret=f707f1&lt;/a> books for download&lt;/li>
&lt;li>free books :https://github.com/pamoroso/free-python-books&lt;/li>
&lt;/ul>
&lt;h2 id="php">PHP&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jiyongcheng/awesome-php">https://github.com/jiyongcheng/awesome-php&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/codeguy/php-the-right-way">https://github.com/codeguy/php-the-right-way&lt;/a>&lt;/li>
&lt;li>Design pattern &lt;a href="https://github.com/DesignPatternsPHP/DesignPatternsPHP">https://github.com/DesignPatternsPHP/DesignPatternsPHP&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/PatrickLouys/professional-php-sample-code">https://github.com/PatrickLouys/professional-php-sample-code&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="framework">Framework&lt;/h3>
&lt;ul>
&lt;li>Simovative PRG-HTTP-Framework &lt;a href="https://github.com/Simovative/zeus">https://github.com/Simovative/zeus&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/microinginer/yii2-dropdown-action-column">https://github.com/microinginer/yii2-dropdown-action-column&lt;/a>&lt;/li>
&lt;li>Symfony 4 &lt;a href="https://github.com/eko/docker-symfony">https://github.com/eko/docker-symfony&lt;/a>&lt;/li>
&lt;li>Magento 1.9 &lt;a href="https://github.com/andreaskoch/dockerized-magento">https://github.com/andreaskoch/dockerized-magento&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="javascript">Javascript&lt;/h2>
&lt;ul>
&lt;li>Javascript &lt;a href="https://masteringjs.io/fundamentals">https://masteringjs.io/fundamentals&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="golang">GoLang&lt;/h2>
&lt;ul>
&lt;li>
&lt;ul>
&lt;li>&lt;a href="https://github.com/unknwon/the-way-to-go_ZH_CN">https://github.com/unknwon/the-way-to-go_ZH_CN&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Shortcut</title><link>https://jiyongcheng.dev/resource/shortcuts/</link><pubDate>Wed, 22 Sep 2021 09:29:55 +1000</pubDate><guid>https://jiyongcheng.dev/resource/shortcuts/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://www.shortcutfoo.com/">https://www.shortcutfoo.com/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Software Architecture and Infrastructure</title><link>https://jiyongcheng.dev/resource/architecture-and-infrastructure/</link><pubDate>Wed, 22 Sep 2021 09:29:55 +1000</pubDate><guid>https://jiyongcheng.dev/resource/architecture-and-infrastructure/</guid><description>&lt;h2 id="software-architecture">Software architecture&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://drive.google.com/file/d/1wfF7ZIPtY-TSzF8ZNmSOD5A2-5WVL9vo/view?usp=sharing">Software architecture patterns&lt;/a>&lt;/li>
&lt;li>search #softwarearchitecture on youtube&lt;/li>
&lt;li>c4 Model &lt;a href="https://c4model.com/">https://c4model.com/&lt;/a>&lt;/li>
&lt;li>DDD &lt;a href="https://github.com/heynickc/awesome-ddd">https://github.com/heynickc/awesome-ddd&lt;/a>&lt;/li>
&lt;li>example about hexagonal architecture.
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=ujb_O6myknY">https://www.youtube.com/watch?v=ujb_O6myknY&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/tedyoung/kid-bank">https://github.com/tedyoung/kid-bank&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.twitch.tv/videos/663668992">https://www.twitch.tv/videos/663668992&lt;/a>&lt;/li>
&lt;li>related to hexagonal architecture: &lt;a href="https://www.jianshu.com/p/c2a361c2406c">https://www.jianshu.com/p/c2a361c2406c&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>architecture decision record: &lt;a href="https://adr.github.io/">https://adr.github.io/&lt;/a>&lt;/li>
&lt;li>archunit is a java tool to help enforcing architecture, for php there is one as well &lt;a href="https://github.com/j6s/phparch">https://github.com/j6s/phparch&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://icyfenix.cn/">凤凰架构-构筑可靠的大型分布式系统&lt;/a>&lt;/li>
&lt;li>explicit architecture &lt;a href="https://github.com/hgraca/explicit-architecture-php">https://github.com/hgraca/explicit-architecture-php&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="system-design">System Design&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.stephanboyer.com/post/132/what-are-covariance-and-contravariance">https://www.stephanboyer.com/post/132/what-are-covariance-and-contravariance&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cloudsavvyit.com/9904/what-is-covariance-and-contravariance-in-programming/">https://www.cloudsavvyit.com/9904/what-is-covariance-and-contravariance-in-programming/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="aws">AWS&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://app.cloudcraft.co/blueprint/23df5228-15cf-4521-bf0b-5e9da066c29c">https://app.cloudcraft.co/blueprint/23df5228-15cf-4521-bf0b-5e9da066c29c&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://app.cloudcraft.co">Draw AWS diagram&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://expeditedsecurity.com/aws-in-plain-english/">https://expeditedsecurity.com/aws-in-plain-english/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="salt">Salt&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/hbokh/awesome-saltstack">https://github.com/hbokh/awesome-saltstack&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Web development</title><link>https://jiyongcheng.dev/resource/web-development/</link><pubDate>Wed, 22 Sep 2021 09:29:55 +1000</pubDate><guid>https://jiyongcheng.dev/resource/web-development/</guid><description>&lt;h2 id="frontend">Frontend&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jiyongcheng/fks">https://github.com/jiyongcheng/fks&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/grab/front-end-guide">https://github.com/grab/front-end-guide&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="html">HTML&lt;/h2>
&lt;ul>
&lt;li>HTML head element explaination &lt;a href="https://github.com/joshbuchea/HEAD">https://github.com/joshbuchea/HEAD&lt;/a>&lt;/li>
&lt;li>Every element I use for the basic structure of a HTML document &lt;a href="https://www.matuzo.at/blog/html-boilerplate/">https://www.matuzo.at/blog/html-boilerplate/&lt;/a>&lt;/li>
&lt;li>CORS &lt;a href="https://jakearchibald.com/2021/cors/">https://jakearchibald.com/2021/cors/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="css">CSS&lt;/h2>
&lt;ul>
&lt;li>Google learn css course: &lt;a href="https://web.dev/learn/css/">https://web.dev/learn/css/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="icon">Icon&lt;/h2>
&lt;ul>
&lt;li>icon free download: &lt;a href="https://iconic.app/">https://iconic.app/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://openmoji.org/">https://openmoji.org/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="jquery">Jquery&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/hayageek/jquery-upload-file">https://github.com/hayageek/jquery-upload-file&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="react">React&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jiyongcheng/react-collection">https://github.com/jiyongcheng/react-collection&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/wellyshen/react-cool-starter">https://github.com/wellyshen/react-cool-starter&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Not All Objects Serializable</title><link>https://jiyongcheng.dev/post/programming-language/php/not-all-objects-serializable/</link><pubDate>Fri, 27 Aug 2021 16:21:52 +1000</pubDate><guid>https://jiyongcheng.dev/post/programming-language/php/not-all-objects-serializable/</guid><description>&lt;h2 id="the-question-i-have">The question I have&lt;/h2>
&lt;p>I was reading this article &amp;ldquo;PHP Serialization, Stack Traces, and Exceptions&amp;rdquo;[^1] and had these questions:&lt;/p>
&lt;ul>
&lt;li>Why PDO isn&amp;rsquo;t serializable?&lt;/li>
&lt;li>Why isn&amp;rsquo;t every type of object serializable?&lt;/li>
&lt;/ul>
&lt;h2 id="the-answer">The answer&lt;/h2>
&lt;p>After some search, I found some useful information as follows. &lt;a href="https://stackoverflow.com/a/25435734">check this for details&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>A PDO object contains state that cannot be represented in the serialization format. For example, the PDO object contains an open connection to a database server.&lt;/p>
&lt;/blockquote>
&lt;p>And I copied the answer from &lt;a href="https://stackoverflow.com/a/1309686">here&lt;/a>:&lt;/p>
&lt;p>Some objects encapsulate resources like file pointers or network sockets that can&amp;rsquo;t be deserialized to the state they were in when you serialized the object that contained them.&lt;/p>
&lt;pre>&lt;code>Example: you shouldn't deserialize an object that serves as an authenticated database connection, because to do so, you'd need the serialized form to contain a plaintext password. This would not be a good practice, because someone might get a hold of the saved serialized form. You also have no idea when you deserialize that the database server is still running, can be accessed, the authentication credentials still valid, etc.
&lt;/code>&lt;/pre>
&lt;h2 id="why-the-test-written-by-the-author-can-work">Why the test written by the author can work&lt;/h2>
&lt;p>Test code is here:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="k">class&lt;/span> &lt;span class="nc">NotSerializable&lt;/span> &lt;span class="k">implements&lt;/span> &lt;span class="nx">Serializable&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">serialize&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">LogicException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;You cannot serialize or unserialize NotSerializable instances&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="nf">unserialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$serialized&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">LogicException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;You cannot serialize or unserialize NotSerializable instances&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If you write a test code like this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="nv">$a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">NotSerializable&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">echo&lt;/span> &lt;span class="nx">serialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>It will throw the error:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="nx">PHP&lt;/span> &lt;span class="nx">Fatal&lt;/span> &lt;span class="nx">error&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Uncaught&lt;/span> &lt;span class="nx">LogicException&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">You&lt;/span> &lt;span class="nx">cannot&lt;/span> &lt;span class="nx">serialize&lt;/span> &lt;span class="k">or&lt;/span> &lt;span class="nx">unserialize&lt;/span> &lt;span class="nx">NotSerializable&lt;/span> &lt;span class="nx">instances&lt;/span> &lt;span class="nx">in&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="nx">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">jdoodle&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="nx">php&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mi">7&lt;/span>
&lt;span class="nx">Stack&lt;/span> &lt;span class="nx">trace&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="c1">#0 [internal function]: NotSerializable-&amp;gt;serialize()
&lt;/span>&lt;span class="c1">#1 /home/jdoodle.php(23): serialize(Object(NotSerializable))
&lt;/span>&lt;span class="c1">#2 {main}
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">thrown&lt;/span> &lt;span class="nx">in&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="nx">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">jdoodle&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="nx">php&lt;/span> &lt;span class="nx">on&lt;/span> &lt;span class="nx">line&lt;/span> &lt;span class="mi">7&lt;/span>
&lt;span class="nx">Command&lt;/span> &lt;span class="nx">exited&lt;/span> &lt;span class="nx">with&lt;/span> &lt;span class="nx">non&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">zero&lt;/span> &lt;span class="nx">status&lt;/span> &lt;span class="mi">255&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="my-understanding">My understanding&lt;/h2>
&lt;p>Because the &lt;code>serialize()&lt;/code> function should return string or null to represent the object&amp;rsquo;s state, but it throws an Exception which isn&amp;rsquo;t it&amp;rsquo;s state. Thus in this scenario the object of class &lt;code>NotSerializable&lt;/code> is not serializable even though it implements the &lt;code>Serializable&lt;/code> interface.&lt;/p>
&lt;h1 id="reference">Reference&lt;/h1>
&lt;p>[^1] &lt;a href="http://fabien.potencier.org/php-serialization-stack-traces-and-exceptions.html">PHP Serialization, Stack Traces, and Exceptions&lt;/a>&lt;/p></description></item><item><title>PHP Magic Method Invoke</title><link>https://jiyongcheng.dev/post/programming-language/php/php-magic-method-invoke/</link><pubDate>Fri, 27 Aug 2021 15:33:52 +1000</pubDate><guid>https://jiyongcheng.dev/post/programming-language/php/php-magic-method-invoke/</guid><description>&lt;h2 id="what-did-i-see">What did I see?&lt;/h2>
&lt;p>I saw in a PHP class using this method &lt;code>__invoke&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="fm">__invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">int&lt;/span> &lt;span class="nv">$errorNumber&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">string&lt;/span> &lt;span class="nv">$errorString&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">string&lt;/span> &lt;span class="nv">$errorFile&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">int&lt;/span> &lt;span class="nv">$errorLine&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">bool&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="why-using-this-method">Why using this method?&lt;/h2>
&lt;p>This magic method is called when user tries to invoke object as a function. Possible use cases may include some approaches like functional programming or some callbacks.&lt;/p>
&lt;h2 id="how-do-people-use-it">How do people use it?&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="k">class&lt;/span> &lt;span class="nc">Invokable&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="sd">/**
&lt;/span>&lt;span class="sd"> * This method will be called if object will be executed like a function:
&lt;/span>&lt;span class="sd"> *
&lt;/span>&lt;span class="sd"> * $invokable();
&lt;/span>&lt;span class="sd"> *
&lt;/span>&lt;span class="sd"> * Args will be passed as in regular method call.
&lt;/span>&lt;span class="sd"> */&lt;/span>
&lt;span class="k">public&lt;/span> &lt;span class="k">function&lt;/span> &lt;span class="fm">__invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$arg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="nx">print_r&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">func_get_args&lt;/span>&lt;span class="p">());&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// Example:
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nv">$invokable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Invokable&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nv">$invokable&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="c1">// optputs:
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">Array&lt;/span>
&lt;span class="p">(&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>