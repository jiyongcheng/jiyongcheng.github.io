<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PHP on Yongcheng website</title><link>https://jiyongcheng.dev/tags/php/</link><description>Recent content in PHP on Yongcheng website</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 08 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://jiyongcheng.dev/tags/php/index.xml" rel="self" type="application/rss+xml"/><item><title>Filetracker</title><link>https://jiyongcheng.dev/projects/creations/2015-1-filetracker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jiyongcheng.dev/projects/creations/2015-1-filetracker/</guid><description>By attaching the barcode on files, it&amp;rsquo;s easy to track where the files are and provide the possibilities for the organisations to trace the files.
Filetracker is dedicated automated document management software for companies who want to store the documents digitally.</description></item><item><title>Change several pages from .Net to PHP (Symfony 3)</title><link>https://jiyongcheng.dev/projects/creations/2015-2-321auto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jiyongcheng.dev/projects/creations/2015-2-321auto/</guid><description>321auto is a French company providing services of car sales and leasing. The company chose to change the websiteâ€™s technical framework from .NET to PHP.
This project is for changing the existing pages from using .Net to PHP (Symfony 3). We chose to use Symfony framework because it is a robust and mature PHP framework. It has been around since 2005 and has a strong developer community and ecosystem supporting it.</description></item><item><title>How does Xdebug 3 work with PHP 8</title><link>https://jiyongcheng.dev/publications/how-does-xdebug-3-work-with-php-8/</link><pubDate>Sat, 08 Jul 2023 00:00:00 +0000</pubDate><guid>https://jiyongcheng.dev/publications/how-does-xdebug-3-work-with-php-8/</guid><description/></item><item><title>How to create a custom user provider in Laravel 9</title><link>https://jiyongcheng.dev/publications/how-to-create-a-custom-user-provider-in-laravel-9/</link><pubDate>Fri, 07 Jul 2023 00:00:00 +0000</pubDate><guid>https://jiyongcheng.dev/publications/how-to-create-a-custom-user-provider-in-laravel-9/</guid><description>Laravel provides several built-in user providers for authentication, including Eloquent and Database providers. However, sometimes you may want to use a custom data source or storage for user authentication. In such cases, you can create a custom user provider in Laravel.</description></item><item><title>Not All Objects Serializable</title><link>https://jiyongcheng.dev/post/not-all-objects-serializable/</link><pubDate>Fri, 27 Aug 2021 16:21:52 +1000</pubDate><guid>https://jiyongcheng.dev/post/not-all-objects-serializable/</guid><description>&lt;h2 id="the-question-i-have">The question I have&lt;/h2>
&lt;p>I was reading this article &amp;ldquo;PHP Serialization, Stack Traces, and Exceptions&amp;rdquo;[^1] and had these questions:&lt;/p>
&lt;ul>
&lt;li>Why PDO isn&amp;rsquo;t serializable?&lt;/li>
&lt;li>Why isn&amp;rsquo;t every type of object serializable?&lt;/li>
&lt;/ul></description></item><item><title>PHP Magic Method Invoke</title><link>https://jiyongcheng.dev/post/php-magic-method-invoke/</link><pubDate>Fri, 27 Aug 2021 15:33:52 +1000</pubDate><guid>https://jiyongcheng.dev/post/php-magic-method-invoke/</guid><description>&lt;h2 id="what-did-i-see">What did I see?&lt;/h2>
&lt;p>I saw in a PHP class using this method &lt;code>__invoke&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> __invoke(&lt;span style="color:#a6e22e">int&lt;/span> $errorNumber, &lt;span style="color:#a6e22e">string&lt;/span> $errorString, &lt;span style="color:#a6e22e">string&lt;/span> $errorFile, &lt;span style="color:#a6e22e">int&lt;/span> $errorLine)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">bool&lt;/span>
{
&lt;span style="color:#f92672">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="why-using-this-method">Why using this method?&lt;/h2>
&lt;p>This magic method is called when user tries to invoke object as a function. Possible use cases may include some approaches like functional programming or some callbacks.&lt;/p></description></item></channel></rss>