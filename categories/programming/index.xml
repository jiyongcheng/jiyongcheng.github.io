<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on What, Why, How</title><link>https://jiyongcheng.dev/categories/programming/</link><description>Recent content in Programming on What, Why, How</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 01 Jan 2022 11:51:44 +0000</lastBuildDate><atom:link href="https://jiyongcheng.dev/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust</title><link>https://jiyongcheng.dev/post/rust/</link><pubDate>Sat, 01 Jan 2022 11:51:44 +0000</pubDate><guid>https://jiyongcheng.dev/post/rust/</guid><description>Getting Started Hello_World.rs 1 2 3 fn main(){println!(&amp;#34;Hello, World!&amp;#34;);} Compiling and Running 1 2 3 $ rustc Hello_World.rs $ ./Hello_World Hello, World! Primitive types bool Boolean (true / false) char character f32, f64 32-bits, 64-bits floats i64, i32, i16, i8 signed 16- &amp;hellip; integers u64, u32, u16, u8 unsigned 16-bits, &amp;hellip; integers isize pointer-sized signed integers usize pointer-sized unsigned integers See: Rust Types</description></item><item><title>C#</title><link>https://jiyongcheng.dev/post/cs/</link><pubDate>Tue, 14 Dec 2021 12:22:00 +0000</pubDate><guid>https://jiyongcheng.dev/post/cs/</guid><description>Getting started Hello.cs 1 2 3 4 5 6 7 8 class Hello { // main method static void Main(string[] args) { // Output: Hello, world! Console.WriteLine(&amp;#34;Hello, world!&amp;#34;); } } Compiling and running (make sure you are in the project directory)
1 2 $ dotnet run Hello, world! Variables 1 2 3 4 5 6 7 8 9 10 11 12 int intNum = 9; long longNum = 9999999; float floatNum = 9.</description></item><item><title>General</title><link>https://jiyongcheng.dev/post/general/</link><pubDate>Wed, 08 Dec 2021 17:30:02 +1100</pubDate><guid>https://jiyongcheng.dev/post/general/</guid><description>&lt;p>For the general programming knowledge.&lt;/p></description></item><item><title>Laravel</title><link>https://jiyongcheng.dev/post/laravel/</link><pubDate>Tue, 09 Nov 2021 18:26:55 +0000</pubDate><guid>https://jiyongcheng.dev/post/laravel/</guid><description>Getting started Requirements PHP version &amp;gt;= 7.3 BCMath PHP Extension Ctype PHP Extension Fileinfo PHP Extension JSON PHP Extension Mbstring PHP Extension OpenSSL PHP Extension PDO PHP Extension Tokenizer PHP Extension XML PHP Extension Ensure your web server directs all requests to your application&amp;rsquo;s public/index.php file, See: Deployment
Windows Install Docker Desktop Install &amp;amp; enable WSL2 Ensure that Docker Desktop is configured to use WSL2 In WSL2 terminal: 1 2 3 $ curl -s https://laravel.</description></item><item><title>JSON</title><link>https://jiyongcheng.dev/post/json/</link><pubDate>Tue, 14 Sep 2021 18:26:55 +0000</pubDate><guid>https://jiyongcheng.dev/post/json/</guid><description>Getting started Introduction JSON is a lightweight text-based open standard designed for human-readable data interchange.
JSON stands for JavaScript Object Notation JSON is easy to read and write. JSON is language agnostic data-interchange format JSON filename extension is .json JSON Internet Media type is application/json {.style-round} Examples 1 2 3 4 5 6 7 8 9 10 11 12 { &amp;#34;name&amp;#34;: &amp;#34;Jason&amp;#34;, &amp;#34;age&amp;#34;: 39, &amp;#34;height&amp;#34;: 1.92, &amp;#34;gender&amp;#34;: &amp;#34;M&amp;#34;, &amp;#34;salary&amp;#34;: 70000, &amp;#34;married&amp;#34;: true, &amp;#34;children&amp;#34;: [ {&amp;#34;name&amp;#34;: &amp;#34;Tom&amp;#34;, &amp;#34;age&amp;#34;: 9, &amp;#34;gender&amp;#34;:&amp;#34;M&amp;#34;}, {&amp;#34;name&amp;#34;: &amp;#34;Ava&amp;#34;, &amp;#34;age&amp;#34;: 7, &amp;#34;gender&amp;#34;:&amp;#34;F&amp;#34;} ] } Types Type Description Number Double precision floating-point String Series of characters Boolean true or false Array Ordered sequence of values Value String, Number, Boolean, null etc Object Unordered collection of key/value pairs null Null or Empty String \&amp;quot; Double quote \\ Backslash \/ Forward slash \b Backspace \f Form feed \n Newline \r Carriage return \t Tab \u Trailed by four hex digits Examples 1 2 3 4 5 { &amp;#34;url&amp;#34;: &amp;#34;https://quickref.</description></item><item><title>HTML</title><link>https://jiyongcheng.dev/post/html/</link><pubDate>Tue, 20 Jul 2021 19:16:42 +0000</pubDate><guid>https://jiyongcheng.dev/post/html/</guid><description>Getting started hello.html 1 2 3 4 5 6 7 8 9 10 11 12 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;title&amp;gt;HTML5 Boilerplate&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello world, hello QuickRef.ME!&amp;lt;/h1&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Or try it out in the jsfiddle Comment 1 2 3 4 5 6 &amp;lt;!-- this is a comment --&amp;gt; &amp;lt;!-- Or you can comment out a large number of lines.</description></item><item><title>GraphQL</title><link>https://jiyongcheng.dev/post/graphql/</link><pubDate>Thu, 15 Jul 2021 20:51:44 +0000</pubDate><guid>https://jiyongcheng.dev/post/graphql/</guid><description>Getting started Overview An alternative approach to RESTful APIs GraphQL is a query language for APIs Easily describe the shape of the GraphQL API using clear shared terms. Clients issue queries/mutations to read and update data GraphQL syntax can express complex entity relations Libraries to implement GraphQL in different languages GraphQL {.link-arrow}
Schema schema GraphQL schema definition query Read and traverse data mutation Modify data or trigger an action subscription Run a query when an event occurs Built-in Scalar Types Int Signed 32‐bit integer Float Signed double-precision floating-point value String UTF‐8 character sequence Boolean true or false ID A Unique identifier Type Definitions scalar Scalar Type type Object Type interface Interface Type union Union Type enum Enum Type input Input Object Type Type Modifiers String Nullable String String!</description></item><item><title>Java</title><link>https://jiyongcheng.dev/post/java/</link><pubDate>Wed, 10 Mar 2021 19:50:01 +0000</pubDate><guid>https://jiyongcheng.dev/post/java/</guid><description>Getting started Hello.java 1 2 3 4 5 6 7 8 public class Hello { // main method public static void main(String[] args) { // Output: Hello, world! System.out.println(&amp;#34;Hello, world!&amp;#34;); } } Compiling and running
1 2 3 $ javac Hello.java $ java Hello Hello, world! Variables 1 2 3 4 5 int num = 5; float floatNum = 5.99f; char letter = &amp;#39;D&amp;#39;; boolean bool = true; String site = &amp;#34;quickref.</description></item><item><title>PHP</title><link>https://jiyongcheng.dev/post/php/</link><pubDate>Mon, 04 Jan 2021 15:23:28 +0000</pubDate><guid>https://jiyongcheng.dev/post/php/</guid><description>PHP Types Iterables 1 2 3 4 5 6 7 8 9 10 11 function bar(): iterable { return [1, 2, 3]; } function gen(): iterable { yield 1; yield 2; yield 3; } foreach (bar() as $value) { echo $value; # =&amp;gt; 123 } PHP Strings Multi-line 1 2 3 4 5 6 7 8 9 10 11 12 13 $str = &amp;#34;foo&amp;#34;; // Uninterpolated multi-liners $nowdoc = &amp;lt;&amp;lt;&amp;lt;&amp;#39;END&amp;#39; Multi line string $str END; // Will do string interpolation $heredoc = &amp;lt;&amp;lt;&amp;lt;ENDMulti line $str END; PHP Arrays Concatenate arrays 1 2 3 4 5 6 $a = [1, 2]; $b = [3, 4]; // PHP 7.</description></item><item><title>Docker</title><link>https://jiyongcheng.dev/post/docker/</link><pubDate>Wed, 30 Dec 2020 10:55:24 +0000</pubDate><guid>https://jiyongcheng.dev/post/docker/</guid><description>Getting started Getting started Create and run a container in background
1 $ docker run -d -p 80:80 docker/getting-started -d - Run the container in detached mode -p 80:80 - Map port 80 to port 80 in the container docker/getting-started - The image to use {.style-none} Create and run a container in foreground
1 $ docker run -it -p 8001:8080 --name my-nginx nginx -it - Interactive bash mode -p 8001:8080 - Map port 8001 to port 8080 in the container --name my-nginx - Specify a name nginx - The image to use {.</description></item><item><title>TOML</title><link>https://jiyongcheng.dev/post/toml/</link><pubDate>Tue, 29 Dec 2020 20:36:35 +0000</pubDate><guid>https://jiyongcheng.dev/post/toml/</guid><description>Getting started Introduction TOML is a minimal configuration file format that&amp;rsquo;s easy to read due to obvious semantics.
Document (toml.io) Learn X in Y minutes (learnxinyminutes.com) Examples 1 2 3 4 5 6 bool = true date = 2006-05-27T07:32:00Z string = &amp;#34;hello&amp;#34; number = 42 float = 3.14 scientificNotation = 1e+12 Comments 1 2 3 4 5 6 # A single line comment example# block level comment example# comment line 1# comment line 2# comment line 3 Integer 1 2 3 4 int1 = +42 int2 = 0 int3 = -21 integerRange = 64 Float 1 2 3 float2 = 3.</description></item><item><title>YAML</title><link>https://jiyongcheng.dev/post/yaml/</link><pubDate>Tue, 29 Dec 2020 18:26:55 +0000</pubDate><guid>https://jiyongcheng.dev/post/yaml/</guid><description>Getting started Introduction YAML is a data serialisation language designed to be directly writable and readable by humans
YAML does not allow the use of tabs Must be space between the element parts YAML is CASE sensitive End your YAML file with the .yaml or .yml extension YAML is a superset of JSON Ansible playbooks are YAML files {.style-round} Scalar types 1 2 3 4 5 6 7 8 9 10 n1:1# integer n2:1.</description></item><item><title>CSS 3</title><link>https://jiyongcheng.dev/post/css/</link><pubDate>Fri, 25 Dec 2020 20:22:47 +0000</pubDate><guid>https://jiyongcheng.dev/post/css/</guid><description>Getting started Introduction CSS is rich in capabilities and is more than simply laying out pages.
External stylesheet 1 &amp;lt;link href=&amp;#34;./path/to/stylesheet/style.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34;&amp;gt; Internal stylesheet 1 2 3 4 5 &amp;lt;style&amp;gt; body { background-color: linen; } &amp;lt;/style&amp;gt; Inline styles 1 2 3 &amp;lt;h2 style=&amp;#34;text-align: center;&amp;#34;&amp;gt;Centered text&amp;lt;/h2&amp;gt; &amp;lt;p style=&amp;#34;color: blue; font-size: 18px;&amp;#34;&amp;gt;Blue, 18-point text&amp;lt;/p&amp;gt; Add class 1 2 &amp;lt;div class=&amp;#34;classname&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;class1 .</description></item><item><title>jQuery</title><link>https://jiyongcheng.dev/post/jquery/</link><pubDate>Thu, 24 Dec 2020 21:08:21 +0000</pubDate><guid>https://jiyongcheng.dev/post/jquery/</guid><description>Getting started Including jQuery 1 &amp;lt;script src=&amp;#34;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; Official CDN 1 &amp;lt;script src=&amp;#34;https://code.jquery.com/jquery-3.5.1.min.js&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; jQuery syntax 1 2 3 $(selector).methodOrFunction(); Example: 1 2 3 4 5 $(&amp;#39;#menu&amp;#39;).on(&amp;#39;click&amp;#39;, () =&amp;gt;{ $(this).hide(); }); $(&amp;#34;body&amp;#34;).css(&amp;#34;background&amp;#34;, &amp;#34;red&amp;#34;); jQuery document ready 1 2 3 4 5 $(document).ready(function() { // Runs after the DOM is loaded. alert(&amp;#39;DOM fully loaded!&amp;#39;); }); 1 2 3 4 $(function(){ // Runs after the DOM is loaded.</description></item><item><title>JavaScript</title><link>https://jiyongcheng.dev/post/javascript/</link><pubDate>Thu, 24 Dec 2020 17:12:25 +0000</pubDate><guid>https://jiyongcheng.dev/post/javascript/</guid><description>Getting started Introduction JavaScript is a lightweight, interpreted programming language.
JSON cheatsheet (quickref.me) Regex in JavaScript (quickref.me) Console 1 2 3 4 5 6 7 8 // =&amp;gt; Hello world! console.log(&amp;#39;Hello world!&amp;#39;); // =&amp;gt; Hello QuickRef.ME console.warn(&amp;#39;hello %s&amp;#39;, &amp;#39;QuickRef.ME&amp;#39;); // Prints error message to stderr console.error(new Error(&amp;#39;Oops!&amp;#39;)); Numbers 1 2 let amount = 6; let price = 4.99; Variables 1 2 3 4 5 6 7 8 9 let x = null; let name = &amp;#34;Tammy&amp;#34;; const found = false; // =&amp;gt; Tammy, false, null console.</description></item><item><title>Python</title><link>https://jiyongcheng.dev/post/python/</link><pubDate>Wed, 23 Dec 2020 18:41:20 +0000</pubDate><guid>https://jiyongcheng.dev/post/python/</guid><description>Getting Started Introduction Python (python.org) Learn X in Y minutes (learnxinyminutes.com) Regex in python (quickref.me) Hello World 1 2 &amp;gt;&amp;gt;&amp;gt; print(&amp;#34;Hello, World!&amp;#34;) Hello, World! The famous &amp;ldquo;Hello World&amp;rdquo; program in Python
Variables 1 2 3 age = 18 # age is of type int name = &amp;#34;John&amp;#34; # name is now of type str print(name) Python can&amp;rsquo;t declare a variable without assignment.</description></item><item><title>Sass</title><link>https://jiyongcheng.dev/post/sass/</link><pubDate>Sun, 20 Dec 2020 22:15:43 +0000</pubDate><guid>https://jiyongcheng.dev/post/sass/</guid><description>Sass Basics Introduction Documentation (sass-lang.com) Learn X in Y minutes (learnxinyminutes.com) Variables 1 2 3 4 5 $defaultLinkColor: #46EAC2; a { color: $defaultLinkColor; } String interpolation 1 2 3 4 5 $wk: -webkit-; .rounded-box { #{$wk}border-radius: 4px; } Comments 1 2 3 4 5 6 7 /* Block comments Block comments Block comments */ // Line comments Mixins 1 2 3 4 5 6 7 @mixinheading-font { font-family: sans-serif; font-weight: bold; } h1 { @includeheading-font; } See: Mixins</description></item><item><title>Golang</title><link>https://jiyongcheng.dev/post/golang/</link><pubDate>Thu, 17 Dec 2020 21:51:44 +0000</pubDate><guid>https://jiyongcheng.dev/post/golang/</guid><description>Getting started hello.go 1 2 3 4 5 6 7 package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello, world!&amp;#34;) } Run directly
1 2 $ go run hello.go Hello, world! Or try it out in the Go repl
Variables 1 2 3 4 5 6 var s1 string s1 = &amp;#34;Learn Go!&amp;#34; // declare multiple variables at once var b, c int = 1, 2 var d = true Short declaration</description></item><item><title>Markdown</title><link>https://jiyongcheng.dev/post/markdown/</link><pubDate>Mon, 14 Dec 2020 18:28:43 +0000</pubDate><guid>https://jiyongcheng.dev/post/markdown/</guid><description>Markdown Quick Reference Headers (atx style) 1 2 3 4 5 6 # h1 ## h2 ### h3 #### h4 ##### h5 ###### h6 Headers (setext style) 1 2 Header 1 ======== 1 2 Header 2 -------- Blockquotes 1 2 3 4 5 &amp;gt; This is &amp;gt; a blockquote &amp;gt; &amp;gt; &amp;gt; Nested &amp;gt; &amp;gt; Blockquote Unordered List 1 2 3 4 * Item 1 * Item 2 * item 3a * item 3b or</description></item><item><title>Bash</title><link>https://jiyongcheng.dev/post/bash/</link><pubDate>Wed, 25 Nov 2020 18:28:43 +0000</pubDate><guid>https://jiyongcheng.dev/post/bash/</guid><description>Getting started hello.sh 1 2 3 4 #!/bin/bash VAR=&amp;#34;world&amp;#34; echo &amp;#34;Hello $VAR!&amp;#34; # =&amp;gt; Hello world! Execute the script
1 $ bash hello.sh Variables 1 2 3 4 5 6 7 8 9 NAME=&amp;#34;John&amp;#34; echo ${NAME} # =&amp;gt; John (Variables) echo $NAME # =&amp;gt; John (Variables) echo &amp;#34;$NAME&amp;#34; # =&amp;gt; John (Variables) echo &amp;#39;$NAME&amp;#39; # =&amp;gt; $NAME (Exact string) echo &amp;#34;${NAME}!&amp;#34; # =&amp;gt; John!</description></item></channel></rss>